import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Dict
from services import get_genius
from storage import storage
from keyboards import (
    get_main_keyboard,
    get_language_keyboard,
    get_song_actions_keyboard
)
import json
import os


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()
genius = get_genius()
admin_router = Router()

os.makedirs(os.path.join(os.path.dirname(__file__), "locales"), exist_ok=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
def load_locales() -> Dict[str, Dict[str, str]]:
    locales = {
        "ru": {
            "start": "–ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç.",
            "help": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\nüéµ –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é\n‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\nüåç –Ø–∑—ã–∫\n‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ",
            "search_song": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:",
            "song_found": "–ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è: {title} - {artist}",
            "no_favorites": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.",
            "favorites": "–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n\nüéµ –ü–µ—Å–Ω–∏:\n{songs}",
            "language_changed": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
            "error": "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "added_to_favorites": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            "lyrics": "–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ {title}:\n\n{lyrics}",
            "choose_option": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "no_results": "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            "about": "–≠—Ç–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω —Å –ø–æ–º–æ—â—å—é Genius API."
        },
        "en": {
            "start": "Hello! I'm a music bot.",
            "help": "Available commands:\n\nüéµ Find song\n‚≠ê Favorites\nüåç Language\n‚ÑπÔ∏è About",
            "search_song": "Enter song title:",
            "song_found": "Found song: {title} - {artist}",
            "no_favorites": "You don't have favorites yet.",
            "favorites": "Your favorites:\n\nüéµ Songs:\n{songs}",
            "language_changed": "Language changed to English.",
            "error": "Error, please try again.",
            "added_to_favorites": "Added to favorites!",
            "lyrics": "Lyrics for {title}:\n\n{lyrics}",
            "choose_option": "Choose an option:",
            "no_results": "No results found for your query.",
            "about": "This is a music bot that helps you find song lyrics using Genius API."
        }
    }

    locales_dir = os.path.join(os.path.dirname(__file__), "locales")
    os.makedirs(locales_dir, exist_ok=True)

    for lang, translations in locales.items():
        with open(os.path.join(locales_dir, f"{lang}.json"), "w", encoding="utf-8") as f:
            json.dump(translations, f, ensure_ascii=False, indent=2)

    return locales

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
locales = load_locales()


class SearchStates(StatesGroup):
    waiting_for_song = State()


def get_translation(user_id: int, key: str) -> str:

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É –¥–ª—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user = storage.get_user(user_id)
    lang = user["language"]
    return locales.get(lang, {}).get(key, key)


async def show_main_menu(user_id: int, message: Message):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    lang = storage.get_user(user_id)["language"]
    await message.answer(
        text=get_translation(user_id, "choose_option"),  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ –≤ locales
        reply_markup=get_main_keyboard(lang)
    )


@router.message(Command("start"))
async def cmd_start(message: Message):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    user_id = message.from_user.id
    try:
        await message.answer(
            text=get_translation(user_id, "start"),
            reply_markup=get_main_keyboard(storage.get_user(user_id)["language"])
        )
    except Exception as e:
        logger.error(f"Error in /start: {e}")
        await message.answer(get_translation(user_id, "start"))

@router.message(Command("help"))
async def cmd_help(message: Message):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    user_id = message.from_user.id
    help_text = get_translation(user_id, "help")
    await message.answer(help_text)


@router.message(F.text.in_(["üéµ –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é", "üéµ Find song"]))
async def search_song_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.set_state(SearchStates.waiting_for_song)
    await message.answer(get_translation(user_id, "search_song"))


@router.message(SearchStates.waiting_for_song)
async def search_song_result(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = storage.get_user(user_id)["language"]

    try:
        songs = await genius.search_songs(message.text)
        if not songs:
            await message.answer(get_translation(user_id, "error"))
            return

        for song in songs[:5]:
            title = song["title"]
            artist = song["primary_artist"]["name"]
            text = get_translation(user_id, "song_found").format(title=title, artist=artist)
            await message.answer(
                text,
                reply_markup=get_song_actions_keyboard(song["id"], lang)
            )
    except Exception as e:
        logger.error(f"Error searching songs: {e}")
        await message.answer(get_translation(user_id, "error"))
    finally:
        await state.clear()


@router.message(F.text.in_(["‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "‚ÑπÔ∏è About"]))
async def show_about(message: Message):
    user_id = message.from_user.id
    await message.answer(get_translation(user_id, "about"))


@router.message(F.text.in_(["‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚≠ê Favorites"]))
async def show_favorites(message: Message):
    user_id = message.from_user.id
    favorites = storage.get_favorites(user_id)

    if not favorites["songs"]:
        await message.answer(get_translation(user_id, "no_favorites"))
    else:
        songs_text = "\n".join([f"- {s['title']} by {s['primary_artist']['name']}" for s in favorites["songs"]]) or "None"
        text = get_translation(user_id, "favorites").format(songs=songs_text)
        await message.answer(text)


@router.message(F.text.in_(["üåç –Ø–∑—ã–∫", "üåç Language"]))
async def change_language(message: Message):
    user_id = message.from_user.id
    await message.answer(
        get_translation(user_id, "language_changed"),
        reply_markup=get_language_keyboard()
    )

@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = callback.data.split("_")[1]
    storage.set_language(user_id, lang)
    await callback.answer(get_translation(user_id, "language_changed"))
    await show_main_menu(user_id, callback.message)


@router.callback_query(F.data.startswith("lyrics_"))
async def show_lyrics(callback: CallbackQuery):
    user_id = callback.from_user.id
    song_id = int(callback.data.split("_")[1])

    try:
        data = await genius._make_request(f"/songs/{song_id}")
        song = data["response"]["song"]
        lyrics_url = song["url"]
        title = song["title"]

        text = get_translation(user_id, "lyrics").format(
            title=title,
            lyrics=f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏: {lyrics_url}"
        )
        await callback.message.answer(text)
    except Exception as e:
        logger.error(f"Error getting lyrics: {e}")
        await callback.answer(get_translation(user_id, "error"))


@router.callback_query(F.data.startswith("fav_song_"))
async def add_song_to_favorites(callback: CallbackQuery):
    user_id = callback.from_user.id
    song_id = int(callback.data.split("_")[2])

    try:
        data = await genius._make_request(f"/songs/{song_id}")
        song = data["response"]["song"]

        storage.add_favorite_song(user_id, {
            "id": song["id"],
            "title": song["title"],
            "primary_artist": {
                "name": song["primary_artist"]["name"],
                "id": song["primary_artist"]["id"]
            }
        })

        await callback.answer(get_translation(user_id, "added_to_favorites"))
    except Exception as e:
        logger.error(f"Error adding song to favorites: {e}")
        await callback.answer(get_translation(user_id, "error"))


@admin_router.message(Command("stats"))
async def cmd_stats(message: Message):

    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""

    total_users = len(storage.data)
    active_today = 1

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}"
    )


@admin_router.message(Command("broadcast"))
async def cmd_broadcast(message: Message):

    """–†–∞—Å—Å—ã–ª–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –ë—É–¥–µ–º —á—Ç–æ-—Ç–æ –∏—Å–∫–∞—Ç—å?\n"
        "Hello! Are we going to find something new?"
    )

    for user_id in storage.data:
        if user_id != "banned":
            try:
                await message.bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n{text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(storage.data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)")


@admin_router.message(F.text.startswith("/ban "))
async def cmd_ban(message: Message):
    user_id = int(message.text.split()[1])
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –±–∞–Ω–∞ (–¥–æ–±–∞–≤—å—Ç–µ –≤ storage.py)
    await message.answer(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")